<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="2sat_8hpp" kind="file" language="C++">
    <compoundname>2sat.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includes refid="graph__theory_8hpp" local="yes">graph_theory.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/template.hpp</includedby>
    <incdepgraph>
      <node id="14">
        <label>linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>graph_theory.hpp</label>
        <link refid="graph__theory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="13">
        <label>dsu.hpp</label>
        <link refid="dsu_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="2sat_8hpp_1aab122b9926a6b55217e5542e400a6bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; vector&lt; char &gt; &gt;</type>
        <definition>optional&lt; vector &lt;char&gt; &gt; sat2</definition>
        <argsstring>(const vector&lt; pr &gt; &amp;v)</argsstring>
        <name>sat2</name>
        <param>
          <type>const vector&lt; <ref refid="core_8hpp_1a58e2677d80a09b5be0f0e56ef70d4507" kindref="member">pr</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Takes a 2 SAT instance and returns a solution. Numerical negation represents logical negation. 0 means empty</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/2sat.hpp" line="4" column="10" bodyfile="/home/ram/OmniTemplate/2sat.hpp" bodystart="4" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="2sat_8hpp_1ae65df9939b591697fda3629f42cb8ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sat2</definition>
        <argsstring>()</argsstring>
        <name>test_sat2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/2sat.hpp" line="38" column="6" bodyfile="/home/ram/OmniTemplate/2sat.hpp" bodystart="38" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graph__theory_8hpp" kindref="compound">graph_theory.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="2sat_8hpp_1aab122b9926a6b55217e5542e400a6bae" refkind="member"><highlight class="normal">optional&lt;vc&lt;char&gt;&gt;<sp/><ref refid="2sat_8hpp_1aab122b9926a6b55217e5542e400a6bae" kindref="member">sat2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vc&lt;pr&gt;<sp/>&amp;<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>max&lt;ll&gt;(n,<sp/>max(abs(p.first),<sp/>abs(p.second)));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>vc&lt;vl&gt;<sp/>g(2<sp/>*<sp/>n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.first)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[n<sp/>-<sp/>p.first].pb(n<sp/>+<sp/>p.second);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.second)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[n<sp/>-<sp/>p.second].pb(n<sp/>+<sp/>p.first);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdfs" kindref="compound">dfs</ref><sp/>topo{g};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>topo();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/>idx(size(g));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>size(topo.q))<sp/>{<sp/>idx[topo.q[i]]<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>vc&lt;char&gt;<sp/>vals(n<sp/>+<sp/>1,<sp/>-1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/><ref refid="graph__theory_8hpp_1a93d1a20d68db74c43261dd28201eb875" kindref="member">scc</ref>(g);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>n<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>idx[comp[n<sp/>+<sp/>i]],<sp/>nx<sp/>=<sp/>idx[comp[n<sp/>-<sp/>i]];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nx<sp/>==<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullopt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals[i]<sp/>=<sp/>nx<sp/>&lt;<sp/>x;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vals;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38" refid="2sat_8hpp_1ae65df9939b591697fda3629f42cb8ec7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="2sat_8hpp_1ae65df9939b591697fda3629f42cb8ec7" kindref="member">test_sat2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret1<sp/>=<sp/>*<ref refid="2sat_8hpp_1aab122b9926a6b55217e5542e400a6bae" kindref="member">sat2</ref>({{1,<sp/>2},<sp/>{-2,<sp/>3}});</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret1[1]<sp/>||<sp/>ret1[2]);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ret1[2]<sp/>||<sp/>ret1[3]);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret2<sp/>=<sp/>*<ref refid="2sat_8hpp_1aab122b9926a6b55217e5542e400a6bae" kindref="member">sat2</ref>({{1,<sp/>2},<sp/>{2,<sp/>3},<sp/>{-2,<sp/>-1}});</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret2[1]<sp/>||<sp/>ret2[2]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret2[2]<sp/>||<sp/>ret2[3]);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ret2[2]<sp/>||<sp/>!ret2[1]);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/2sat.hpp"/>
  </compounddef>
</doxygen>
