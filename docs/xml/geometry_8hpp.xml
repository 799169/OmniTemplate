<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="geometry_8hpp" kind="file" language="C++">
    <compoundname>geometry.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/template.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/geometry.hpp</label>
        <link refid="geometry_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/geometry.hpp</label>
        <link refid="geometry_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcht" prot="public">cht</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="geometry_8hpp_1a3a11abcc4197ec78b28351e3eed5be89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto dot</definition>
        <argsstring>(pt const &amp;a, pt const &amp;b)</argsstring>
        <name>dot</name>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/geometry.hpp" line="8" column="6" bodyfile="/home/ram/OmniTemplate/geometry.hpp" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="geometry_8hpp_1a39bd99d30f0161c6653cc30527741cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto wedge</definition>
        <argsstring>(pt const &amp;a, pt const &amp;b)</argsstring>
        <name>wedge</name>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/geometry.hpp" line="9" column="6" bodyfile="/home/ram/OmniTemplate/geometry.hpp" bodystart="9" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="geometry_8hpp_1af97237cbfd8361bffc2d971fd75b4c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto area</definition>
        <argsstring>(pt a, pt b, pt c)</argsstring>
        <name>area</name>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/geometry.hpp" line="10" column="6" bodyfile="/home/ram/OmniTemplate/geometry.hpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="geometry_8hpp_1a701ea24ac7922f0e0f6e73ffa4d09a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ccw</definition>
        <argsstring>(pt a, pt b, pt c)</argsstring>
        <name>ccw</name>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns whether moving through <formula id="0">$a \rightarrow b \rightarrow c$</formula> is counterclockwise</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/geometry.hpp" line="11" column="6" bodyfile="/home/ram/OmniTemplate/geometry.hpp" bodystart="11" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="geometry_8hpp_1a0b6c2daaffdebeec1ac633cff83d9594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hull</definition>
        <argsstring>(Cont &amp;v, remove_const_t&lt; decltype(true)&gt; do_sort=true)</argsstring>
        <name>hull</name>
        <param>
          <type>Cont &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(true)&gt;</type>
          <declname>do_sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the convex hull of the points in v</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/geometry.hpp" line="20" column="18" bodyfile="/home/ram/OmniTemplate/geometry.hpp" bodystart="20" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="geometry_8hpp_1a3e644172c556a84fa2c65aa39e99cea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto convex_min</definition>
        <argsstring>(const Range &amp;r, const Func &amp;f)</argsstring>
        <name>convex_min</name>
        <param>
          <type>const Range &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Func &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the minimum of a convex function f over a Range r.</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/geometry.hpp" line="39" column="6" bodyfile="/home/ram/OmniTemplate/geometry.hpp" bodystart="39" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="4" refid="geometry_8hpp_1a71b653e8feee4fdabf84841ac545b445" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a71b653e8feee4fdabf84841ac545b445" kindref="member">operator&lt;</ref>(<ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" kindref="member">map_args</ref>([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{real(x),<sp/>imag(x)};<sp/>})(a,<sp/>b);</highlight></codeline>
<codeline lineno="6"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="geometry_8hpp_1a3a11abcc4197ec78b28351e3eed5be89" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a3a11abcc4197ec78b28351e3eed5be89" kindref="member">dot</ref>(<ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real(conj(a)<sp/>*<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="9" refid="geometry_8hpp_1a39bd99d30f0161c6653cc30527741cef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a39bd99d30f0161c6653cc30527741cef" kindref="member">wedge</ref>(<ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imag(conj(a)<sp/>*<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="10" refid="geometry_8hpp_1af97237cbfd8361bffc2d971fd75b4c51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1af97237cbfd8361bffc2d971fd75b4c51" kindref="member">area</ref>(<ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>a,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>b,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a39bd99d30f0161c6653cc30527741cef" kindref="member">wedge</ref>(b<sp/>-<sp/>a,<sp/>c<sp/>-<sp/>a);<sp/>}</highlight></codeline>
<codeline lineno="11" refid="geometry_8hpp_1a701ea24ac7922f0e0f6e73ffa4d09a51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a701ea24ac7922f0e0f6e73ffa4d09a51" kindref="member">ccw</ref>(<ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>a,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>b,<sp/><ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>w<sp/>=<sp/><ref refid="geometry_8hpp_1af97237cbfd8361bffc2d971fd75b4c51" kindref="member">area</ref>(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a<sp/>==<sp/>b<sp/>||<sp/>a<sp/>==<sp/>c<sp/>||<sp/>b<sp/>==<sp/>c<sp/>||<sp/>w))<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>invalid_argument{</highlight><highlight class="stringliteral">&quot;Points<sp/>are<sp/>collinear.&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20" refid="geometry_8hpp_1a0b6c2daaffdebeec1ac633cff83d9594" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a0b6c2daaffdebeec1ac633cff83d9594" kindref="member">hull</ref>(Cont<sp/>&amp;<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>,<sp/><ref refid="core_8hpp_1a1a5cedaa2166b87bc174d54c6a9aae47" kindref="member">df</ref>(do_sort,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_sort)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_element(<ref refid="core_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>),<sp/><ref refid="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" kindref="member">map_args</ref>([](<ref refid="core_8hpp_1aaf26cd2ec4fe33a7b7601fe9386cd44e" kindref="member">pt</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{imag(a),<sp/>real(a)};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="core_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>),<sp/>bind(<ref refid="geometry_8hpp_1a701ea24ac7922f0e0f6e73ffa4d09a51" kindref="member">ccw</ref>,<sp/>p,<sp/>_1,<sp/>_2));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>vc&lt;pt&gt;<sp/>h;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(h.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>!<ref refid="geometry_8hpp_1a701ea24ac7922f0e0f6e73ffa4d09a51" kindref="member">ccw</ref>(h[h.size()<sp/>-<sp/>2],<sp/>h.back(),<sp/>x))<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.pop_back();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.push_back(x);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="39" refid="geometry_8hpp_1a3e644172c556a84fa2c65aa39e99cea5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="geometry_8hpp_1a3e644172c556a84fa2c65aa39e99cea5" kindref="member">convex_min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*partition_point(<ref refid="core_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(r),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(f(i)<sp/>&lt;<sp/>f(i<sp/>+<sp/>1));<sp/>});</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44" refid="structcht" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcht" kindref="compound">cht</ref><sp/>{</highlight></codeline>
<codeline lineno="47" refid="structcht_1a2dacac27432e96effbcd18cd158074ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vc&lt;pt&gt;<sp/><ref refid="structcht_1a2dacac27432e96effbcd18cd158074ec" kindref="member">h</ref>;<sp/></highlight></codeline>
<codeline lineno="48" refid="structcht_1a3a87804c6e0c6e46d72ff2e095f5794a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/><ref refid="structcht_1a3a87804c6e0c6e46d72ff2e095f5794a" kindref="member">cht</ref>(Cont<sp/>&amp;<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utility_8hpp_1a44a45701b2aec7031b9a0592b8fe433b" kindref="member">uniq</ref>(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>,<sp/><ref refid="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" kindref="member">map_args</ref>(<ref refid="utility_8hpp_1a76cdb96860b77886867832efcffeeb32" kindref="member">lambda</ref>(imag),<sp/>equal_to{}),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" kindref="member">map_args</ref>(<ref refid="utility_8hpp_1a76cdb96860b77886867832efcffeeb32" kindref="member">lambda</ref>(conj)));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcht_1a2dacac27432e96effbcd18cd158074ec" kindref="member">h</ref><sp/>=<sp/><ref refid="core_8hpp_1a49bc164f30e64702250d2cbea09bf86c" kindref="member">dbg</ref>(<ref refid="geometry_8hpp_1a0b6c2daaffdebeec1ac633cff83d9594" kindref="member">hull</ref>(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53" refid="structcht_1af18569403920449f2f6a7059497dddb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structcht_1af18569403920449f2f6a7059497dddb9" kindref="member">min</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eval<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real(<ref refid="structcht_1a2dacac27432e96effbcd18cd158074ec" kindref="member">h</ref>[i])<sp/>*<sp/>x<sp/>+<sp/>imag(<ref refid="structcht_1a2dacac27432e96effbcd18cd158074ec" kindref="member">h</ref>[i]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eval(<ref refid="geometry_8hpp_1a3e644172c556a84fa2c65aa39e99cea5" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{size(<ref refid="structcht_1a2dacac27432e96effbcd18cd158074ec" kindref="member">h</ref>)<sp/>-<sp/>1},<sp/>eval));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/geometry.hpp"/>
  </compounddef>
</doxygen>
