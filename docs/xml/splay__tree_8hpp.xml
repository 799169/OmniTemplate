<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="splay__tree_8hpp" kind="file" language="C++">
    <compoundname>splay_tree.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/template.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/splay_tree.hpp</label>
        <link refid="splay__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/splay_tree.hpp</label>
        <link refid="splay__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structSplayTree" prot="public">SplayTree</innerclass>
    <innerclass refid="structSplayTree_1_1Node" prot="public">SplayTree::Node</innerclass>
    <innerclass refid="structSplayTree_1_1iterator" prot="public">SplayTree::iterator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="splay__tree_8hpp_1a453119e81bfa8f9fc72104639b907497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_splay_tree</definition>
        <argsstring>()</argsstring>
        <name>test_splay_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/splay_tree.hpp" line="154" column="6" bodyfile="/home/ram/OmniTemplate/splay_tree.hpp" bodystart="154" bodyend="185"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="structSplayTree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSplayTree" kindref="compound">SplayTree</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5" refid="structSplayTree_1_1Node" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="structSplayTree_1_1Node_1a37fd8ea4f80e4763676fb3a80dbe8c81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="structSplayTree_1_1Node_1a37fd8ea4f80e4763676fb3a80dbe8c81" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="9" refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array&lt;Node<sp/>*,<sp/>2&gt;<sp/><ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>{};</highlight></codeline>
<codeline lineno="10" refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>{};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12" refid="structSplayTree_1_1iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="13" refid="structSplayTree_1_1iterator_1ad051365ab1cf91a51228681ae68f3e2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator_1ad051365ab1cf91a51228681ae68f3e2e" kindref="member">iterator_category</ref><sp/>=<sp/>bidirectional_iterator_tag;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16" refid="structSplayTree_1_1iterator_1a97df329bdff57dc3a956cea177bd3624" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator_1a97df329bdff57dc3a956cea177bd3624" kindref="member">operator--</ref>()<sp/>{<sp/>advance&lt;false&gt;();<sp/>}</highlight></codeline>
<codeline lineno="17" refid="structSplayTree_1_1iterator_1a16422ee75f155368e0186196ac89b43c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator_1a16422ee75f155368e0186196ac89b43c" kindref="member">operator++</ref>()<sp/>{<sp/>advance&lt;true&gt;();<sp/>}</highlight></codeline>
<codeline lineno="18" refid="structSplayTree_1_1iterator_1a784b5bd1d70a24bf1367fedd30c9dc7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>&amp;<ref refid="structSplayTree_1_1iterator_1a784b5bd1d70a24bf1367fedd30c9dc7e" kindref="member">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>-&gt;<ref refid="structSplayTree_1_1Node_1a37fd8ea4f80e4763676fb3a80dbe8c81" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="19" refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="20" refid="structSplayTree_1_1iterator_1a657b0988d690e341ba0560d59b845143" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1iterator_1a657b0988d690e341ba0560d59b845143" kindref="member">iterator</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*node_arg)<sp/>:<sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>(node_arg)<sp/>{}</highlight></codeline>
<codeline lineno="21" refid="structSplayTree_1_1iterator_1aa7e5c04b48a15e8f3d7725fdc208572b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator_1aa7e5c04b48a15e8f3d7725fdc208572b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref><sp/>oth)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.node<sp/>==<sp/>oth.<ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dir&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>advance()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref><sp/>=<sp/>extremum&lt;!dir&gt;(<ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref><sp/>&amp;&amp;<sp/><ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>(<ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>)<sp/>==<sp/>dir;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref><sp/>=<sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref><sp/>=<sp/><ref refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" kindref="member">node</ref>-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="37" refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref>{};</highlight></codeline>
<codeline lineno="38" refid="structSplayTree_1a4db3a3ba8655169a636ca73c4a88cc15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a4db3a3ba8655169a636ca73c4a88cc15" kindref="member">sz</ref>{};</highlight></codeline>
<codeline lineno="39" refid="structSplayTree_1a83684091424cc8dab08bba29cacfc6df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a83684091424cc8dab08bba29cacfc6df" kindref="member">SplayTree</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="40" refid="structSplayTree_1a9e4c104df4c96bec374dc45246a3d0dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a9e4c104df4c96bec374dc45246a3d0dd" kindref="member">~SplayTree</ref>()<sp/>{<sp/><ref refid="structSplayTree_1ac70b4b2c0a50a56f2984a1dfb332649a" kindref="member">destroy</ref>(<ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref>);<sp/>}</highlight></codeline>
<codeline lineno="41" refid="structSplayTree_1ac70b4b2c0a50a56f2984a1dfb332649a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1ac70b4b2c0a50a56f2984a1dfb332649a" kindref="member">destroy</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>child<sp/>:<sp/>node-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1ac70b4b2c0a50a56f2984a1dfb332649a" kindref="member">destroy</ref>(child);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50" refid="structSplayTree_1a8410ea1b66aeee0e07f11ec02dae2fa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a8410ea1b66aeee0e07f11ec02dae2fa6" kindref="member">attach</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>par,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>,<sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref><sp/>=<sp/>par;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[<ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>]<sp/>=<sp/>new_;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56" refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>child)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]<sp/>==<sp/>child;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59" refid="structSplayTree_1a167b770118895382687c93f9715a6879" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a167b770118895382687c93f9715a6879" kindref="member">rotate</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>(x);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;parent)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a8410ea1b66aeee0e07f11ec02dae2fa6" kindref="member">attach</ref>(p-&gt;parent,<sp/><ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>(p),<sp/>x);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a8410ea1b66aeee0e07f11ec02dae2fa6" kindref="member">attach</ref>(p,<sp/>i,<sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[!i]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a8410ea1b66aeee0e07f11ec02dae2fa6" kindref="member">attach</ref>(x,<sp/>!i,<sp/>p);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72" refid="structSplayTree_1a88e940e01fba29d4f1eec8b8b5fb2cea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a88e940e01fba29d4f1eec8b8b5fb2cea" kindref="member">splay</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!x-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zig<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a167b770118895382687c93f9715a6879" kindref="member">rotate</ref>(x);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>(x)<sp/>==<sp/><ref refid="structSplayTree_1a06fae4dd156688ed46976373f21fbb26" kindref="member">side</ref>(x-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zig-zig<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a167b770118895382687c93f9715a6879" kindref="member">rotate</ref>(x-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a167b770118895382687c93f9715a6879" kindref="member">rotate</ref>(x);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zig-zag<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a167b770118895382687c93f9715a6879" kindref="member">rotate</ref>(x);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a167b770118895382687c93f9715a6879" kindref="member">rotate</ref>(x);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90" refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="structSplayTree_1a4db3a3ba8655169a636ca73c4a88cc15" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;nw<sp/>=<sp/>y-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[x-&gt;<ref refid="structSplayTree_1_1Node_1a37fd8ea4f80e4763676fb3a80dbe8c81" kindref="member">value</ref><sp/>&gt;<sp/>y-&gt;value];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nw)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nw<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nw-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref><sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a88e940e01fba29d4f1eec8b8b5fb2cea" kindref="member">splay</ref>(nw);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110" refid="structSplayTree_1a9885fe15adae36e69006e8e2e2e5e21c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a9885fe15adae36e69006e8e2e2e5e21c" kindref="member">insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;key)<sp/>{<sp/><ref refid="structSplayTree_1a9885fe15adae36e69006e8e2e2e5e21c" kindref="member">insert</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref>{key});<sp/>}</highlight></codeline>
<codeline lineno="111" refid="structSplayTree_1a31e65260a6cc94aab86c6a3def846830" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a31e65260a6cc94aab86c6a3def846830" kindref="member">erase</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a88e940e01fba29d4f1eec8b8b5fb2cea" kindref="member">splay</ref>(x);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref><sp/>=<sp/><ref refid="structSplayTree_1a17f97eb4546fb9a2c182c5f6b2061395" kindref="member">join</ref>(x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[0],<sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="structSplayTree_1a4db3a3ba8655169a636ca73c4a88cc15" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118" refid="structSplayTree_1afb833e454430e81bb3b1442237805320" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1afb833e454430e81bb3b1442237805320" kindref="member">erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;key)<sp/>{<sp/><ref refid="structSplayTree_1afb833e454430e81bb3b1442237805320" kindref="member">erase</ref>(<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(key));<sp/>}</highlight></codeline>
<codeline lineno="119" refid="structSplayTree_1a879ddfc2ee6ff265e98ae1cfa851ff3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structSplayTree_1a879ddfc2ee6ff265e98ae1cfa851ff3e" kindref="member">extremum</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[i]<sp/>?<sp/>extremum&lt;i&gt;(x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[i])<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123" refid="structSplayTree_1a17f97eb4546fb9a2c182c5f6b2061395" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structSplayTree_1a17f97eb4546fb9a2c182c5f6b2061395" kindref="member">join</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mx<sp/>=<sp/>extremum&lt;true&gt;(a);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a88e940e01fba29d4f1eec8b8b5fb2cea" kindref="member">splay</ref>(mx);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mx-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx-&gt;<ref refid="structSplayTree_1_1Node_1a1e7187c88cf9cf7d8d886b7e331fa844" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135" refid="structSplayTree_1a0fce64ec0ca10d1774cd24d4c98edf1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>array&lt;Node<sp/>*,<sp/>2&gt;<sp/><ref refid="structSplayTree_1a0fce64ec0ca10d1774cd24d4c98edf1c" kindref="member">split</ref>(<ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1a88e940e01fba29d4f1eec8b8b5fb2cea" kindref="member">splay</ref>(x);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>use<sp/>detach<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]-&gt;parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x,<sp/>x-&gt;<ref refid="structSplayTree_1_1Node_1ad58709abd217b595a81e7644025186ae" kindref="member">child</ref>[1]};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143" refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x<sp/>&amp;&amp;<sp/>key<sp/>!=<sp/>x-&gt;value;<sp/>x<sp/>=<sp/>x-&gt;child[key<sp/>&gt;<sp/>x-&gt;value])</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149" refid="structSplayTree_1a67cc9fe4b6d6c9e2167701c982fcefb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a67cc9fe4b6d6c9e2167701c982fcefb8" kindref="member">size</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a4db3a3ba8655169a636ca73c4a88cc15" kindref="member">sz</ref>;<sp/>}</highlight></codeline>
<codeline lineno="150" refid="structSplayTree_1a4b5e196ef6ecd49b08cd405a30ee6a6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a4b5e196ef6ecd49b08cd405a30ee6a6b" kindref="member">empty</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1a67cc9fe4b6d6c9e2167701c982fcefb8" kindref="member">size</ref>()<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="151" refid="structSplayTree_1aec1d30f8e415fe8e5946e524d27c1ad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structSplayTree_1aec1d30f8e415fe8e5946e524d27c1ad6" kindref="member">begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref>{extremum&lt;false&gt;(<ref refid="structSplayTree_1a6420512e79937fd59edb2a595f977750" kindref="member">root</ref>)};<sp/>}</highlight></codeline>
<codeline lineno="152" refid="structSplayTree_1a45302c7001ad3e2564ac91ccd7dd9a0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structSplayTree_1a45302c7001ad3e2564ac91ccd7dd9a0c" kindref="member">end</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154" refid="splay__tree_8hpp_1a453119e81bfa8f9fc72104639b907497" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="splay__tree_8hpp_1a453119e81bfa8f9fc72104639b907497" kindref="member">test_splay_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSplayTree" kindref="compound">SplayTree&lt;int&gt;</ref><sp/>sp;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(4);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(3);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(5);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a67cc9fe4b6d6c9e2167701c982fcefb8" kindref="member">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!sp.<ref refid="structSplayTree_1a4b5e196ef6ecd49b08cd405a30ee6a6b" kindref="member">empty</ref>());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(4)-&gt;value<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(3)-&gt;value<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(5)-&gt;value<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(2)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(6)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a31e65260a6cc94aab86c6a3def846830" kindref="member">erase</ref>(3);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a67cc9fe4b6d6c9e2167701c982fcefb8" kindref="member">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(3)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(5)-&gt;value<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(4)-&gt;value<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(20);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(-2);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structSplayTree_1a68ee8070ca751318c345c2ec728b6003" kindref="member">insert</ref>(6);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/>expected{-2,<sp/>4,<sp/>5,<sp/>6,<sp/>20};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a67cc9fe4b6d6c9e2167701c982fcefb8" kindref="member">size</ref>()<sp/>==<sp/>expected.size());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structSplayTree_1a875c802868fd4e94282efdedd86cb772" kindref="member">find</ref>(x)-&gt;value<sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" kindref="member">SplayTree&lt;int&gt;::iterator::value_type</ref><sp/>x1{};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/>vec;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(sp.<ref refid="structSplayTree_1aec1d30f8e415fe8e5946e524d27c1ad6" kindref="member">begin</ref>(),<sp/>sp.<ref refid="structSplayTree_1a45302c7001ad3e2564ac91ccd7dd9a0c" kindref="member">end</ref>(),<sp/>back_inserter(vec));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a49bc164f30e64702250d2cbea09bf86c" kindref="member">dbg</ref>(vec);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(vec<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[0;32mAccepted\e[0m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/splay_tree.hpp"/>
  </compounddef>
</doxygen>
