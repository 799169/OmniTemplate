<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="string_8hpp" kind="file" language="C++">
    <compoundname>string.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/template.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/ram/OmniTemplate/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structhash__str" prot="public">hash_str</innerclass>
    <innerclass refid="structbytehash" prot="public">bytehash</innerclass>
    <innerclass refid="structsearch__it" prot="public">search_it</innerclass>
    <innerclass refid="classtrie__node" prot="public">trie_node</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="string_8hpp_1a856c91a54b4b92ce7969d3ce8aeac3f1" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string empstr</definition>
        <argsstring></argsstring>
        <name>empstr</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="71" column="8" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="string_8hpp_1ad36260cad14dddb2dd9ecacaa7eae158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref></type>
        <definition>vl prefix</definition>
        <argsstring>(string const &amp;s)</argsstring>
        <name>prefix</name>
        <param>
          <type>string const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="44" column="4" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="44" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="string_8hpp_1a75acb80dd54dda8d2ae0c24a5d6f7c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto search_all</definition>
        <argsstring>(string const &amp;t, string const &amp;s)</argsstring>
        <name>search_all</name>
        <param>
          <type>string const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>string const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="61" column="6" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="string_8hpp_1ab6c8ca76a6f0b8cc64a2a42b5f37c449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator==</definition>
        <argsstring>(search_it const &amp;a, search_it const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structsearch__it" kindref="compound">search_it</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structsearch__it" kindref="compound">search_it</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="111" column="6" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="111" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="string_8hpp_1a172956100bf7aa13ca8ecb1b872826e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator&lt;</definition>
        <argsstring>(search_it const &amp;a, search_it const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structsearch__it" kindref="compound">search_it</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structsearch__it" kindref="compound">search_it</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="123" column="1" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="123" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="string_8hpp_1a426f3aae79af5e0f9bf49f2dc28d3da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto search_ra</definition>
        <argsstring>(const Ts &amp;... args)</argsstring>
        <name>search_ra</name>
        <param>
          <type>const Ts &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="135" column="18" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="string_8hpp_1a0ca9f9c163492b1f67aecc120f5b5e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_trie_node</definition>
        <argsstring>()</argsstring>
        <name>test_trie_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/string.hpp" line="148" column="6" bodyfile="/home/ram/OmniTemplate/string.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="structhash__str" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash__str" kindref="compound">hash_str</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="structhash__str_1a30fd050c96c02d32403015aa45cf36c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structhash__str_1a30fd050c96c02d32403015aa45cf36c5" kindref="member">lcg_mod</ref><sp/>=<sp/>(1ULL<sp/>&lt;&lt;<sp/>62)<sp/>-<sp/>57;</highlight></codeline>
<codeline lineno="5" refid="structhash__str_1a3f7edccf79b433723951542b1521e893" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structhash__str_1a3f7edccf79b433723951542b1521e893" kindref="member">st</ref>;</highlight></codeline>
<codeline lineno="6" refid="structhash__str_1a6dfc768d54875741155fc4f45cbdab56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vc&lt;md&gt;<sp/><ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>,<sp/><ref refid="structhash__str_1a6dfc768d54875741155fc4f45cbdab56" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="7" refid="structhash__str_1aa2aca132b7c912cb2a0f7f85fa4bac9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structhash__str_1aa2aca132b7c912cb2a0f7f85fa4bac9d" kindref="member">hash_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;s)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structhash__str_1a3f7edccf79b433723951542b1521e893" kindref="member">st</ref>(s.data()),<sp/><ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>(s.size()<sp/>+<sp/>1),<sp/><ref refid="structhash__str_1a6dfc768d54875741155fc4f45cbdab56" kindref="member">p</ref>(s.size())<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwith" kindref="compound">with</ref><sp/>_w{<ref refid="structhash__str_1a30fd050c96c02d32403015aa45cf36c5" kindref="member">lcg_mod</ref>,<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmd" kindref="compound">md</ref><sp/>g<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>s.size())<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>*=<sp/><ref refid="structmd" kindref="compound">md</ref>{0x51a3e995948c0deULL};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(A);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(B);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(lli((int128(A.x)*int128(B.x))%int128(M)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>[i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="structmd" kindref="compound">md</ref>{s[i]}<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(h);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sum(<ref refid="core_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>),<sp/>begin(<ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inv<sp/>=<sp/><ref refid="structmd" kindref="compound">md</ref>{1}<sp/>/<sp/><ref refid="structmd" kindref="compound">md</ref>{0x51a3e995948c0deULL};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmd" kindref="compound">md</ref><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/><ref refid="structhash__str_1a6dfc768d54875741155fc4f45cbdab56" kindref="member">p</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__str_1a6dfc768d54875741155fc4f45cbdab56" kindref="member">p</ref>[i]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/><ref refid="structmd" kindref="compound">md</ref>{inv};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27" refid="structhash__str_1ae6fd6e0300d1b4020e0df5430f54f507" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhash__str_1ae6fd6e0300d1b4020e0df5430f54f507" kindref="member">operator()</ref>(string_view<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwith" kindref="compound">with</ref><sp/>_w{<ref refid="structhash__str_1a30fd050c96c02d32403015aa45cf36c5" kindref="member">lcg_mod</ref>,<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l<sp/>=<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>.data()<sp/>-<sp/><ref refid="structhash__str_1a3f7edccf79b433723951542b1521e893" kindref="member">st</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(l);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(v.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(md{10}-md{100});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(h[l+v.size()]-h[l]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dbg(p[l]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref>((<ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>[l<sp/>+<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>.size()]<sp/>-<sp/><ref refid="structhash__str_1a8ff1aebd14db666e829ba1c002158b74" kindref="member">h</ref>[l])<sp/>*<sp/><ref refid="structhash__str_1a6dfc768d54875741155fc4f45cbdab56" kindref="member">p</ref>[l]);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38" refid="structbytehash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbytehash" kindref="compound">bytehash</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="structbytehash_1a9134bf96ee911825f045ee603d5970cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structbytehash_1a9134bf96ee911825f045ee603d5970cd" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash&lt;string_view&gt;{}(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_view{</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;x),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(x)});</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44" refid="string_8hpp_1ad36260cad14dddb2dd9ecacaa7eae158" refkind="member"><highlight class="normal"><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/><ref refid="string_8hpp_1ad36260cad14dddb2dd9ecacaa7eae158" kindref="member">prefix</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>s.size();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/>p(n);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>=<sp/>p[i<sp/>-<sp/>1];;<sp/>j<sp/>=<sp/>p[j<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[j]<sp/>==<sp/>s[i])<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>j<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!j)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a49bc164f30e64702250d2cbea09bf86c" kindref="member">dbg</ref>(p);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61" refid="string_8hpp_1a75acb80dd54dda8d2ae0c24a5d6f7c0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="string_8hpp_1a75acb80dd54dda8d2ae0c24a5d6f7c0c" kindref="member">search_all</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/><ref refid="string_8hpp_1ad36260cad14dddb2dd9ecacaa7eae158" kindref="member">prefix</ref>(s<sp/>+<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>+<sp/>t);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>t.size())<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[s.size()<sp/>+<sp/>1<sp/>+<sp/>i]<sp/>==<sp/>s.size())<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>.pb(i);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71" refid="string_8hpp_1a856c91a54b4b92ce7969d3ce8aeac3f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="string_8hpp_1a856c91a54b4b92ce7969d3ce8aeac3f1" kindref="member">empstr</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72" refid="structsearch__it" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsearch__it" kindref="compound">search_it</ref><sp/>:<sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;ll&gt;<sp/>{</highlight></codeline>
<codeline lineno="73" refid="structsearch__it_1a0ef4e543076893cd1e302dd0e2f0a685" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsearch__it_1a0ef4e543076893cd1e302dd0e2f0a685" kindref="member">iterator_category</ref><sp/>=<sp/>input_iterator_tag;</highlight></codeline>
<codeline lineno="74" refid="structsearch__it_1ab18d9cefef96970606014548fa166514" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structsearch__it_1ab18d9cefef96970606014548fa166514" kindref="member">t</ref>,<sp/><ref refid="structsearch__it_1a38ccae906a5d300780dce4d451deb17f" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="75" refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>,<sp/><ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref>;</highlight></codeline>
<codeline lineno="76" refid="structsearch__it_1a8cf3aec16419ecf395c43b43202ffb60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/><ref refid="structsearch__it_1a8cf3aec16419ecf395c43b43202ffb60" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="77" refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>=<sp/>0,<sp/><ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78" refid="structsearch__it_1a734b63a53fc42bdf87d06bdf420af261" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsearch__it_1a734b63a53fc42bdf87d06bdf420af261" kindref="member">search_it</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t_,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s_)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structsearch__it_1ab18d9cefef96970606014548fa166514" kindref="member">t</ref>(t_),<sp/><ref refid="structsearch__it_1a38ccae906a5d300780dce4d451deb17f" kindref="member">s</ref>(s_),<sp/><ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>(<ref refid="structsearch__it_1a38ccae906a5d300780dce4d451deb17f" kindref="member">s</ref>.size()),<sp/><ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref>(<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref><sp/>+<sp/>1<sp/>+<sp/><ref refid="structsearch__it_1ab18d9cefef96970606014548fa166514" kindref="member">t</ref>.size()),<sp/><ref refid="structsearch__it_1a8cf3aec16419ecf395c43b43202ffb60" kindref="member">p</ref>(<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82" refid="structsearch__it_1aefe859f1cfc5ae1745baeabe41cd7a83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structsearch__it_1aefe859f1cfc5ae1745baeabe41cd7a83" kindref="member">search_it</ref>()<sp/>:<sp/><ref refid="structsearch__it" kindref="compound">search_it</ref>(<ref refid="string_8hpp_1a856c91a54b4b92ce7969d3ce8aeac3f1" kindref="member">empstr</ref>,<sp/><ref refid="string_8hpp_1a856c91a54b4b92ce7969d3ce8aeac3f1" kindref="member">empstr</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="83" refid="structsearch__it_1af8d68beb8a634f1d6c15d8531360a08f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structsearch__it_1af8d68beb8a634f1d6c15d8531360a08f" kindref="member">operator*</ref>()<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>-<sp/>(<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87" refid="structsearch__it_1a33dc3ba18c2a273db02fc12ad1ea64e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsearch__it_1a33dc3ba18c2a273db02fc12ad1ea64e6" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>;<sp/><ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref>;<sp/>++<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/><ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>&lt;=<sp/><ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref><sp/>?<sp/><ref refid="structsearch__it_1a38ccae906a5d300780dce4d451deb17f" kindref="member">s</ref>.c_str()[<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>]<sp/>:<sp/><ref refid="structsearch__it_1ab18d9cefef96970606014548fa166514" kindref="member">t</ref>[*</highlight><highlight class="keyword">this</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>=<sp/><ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref>;;<sp/>j<sp/>=<sp/><ref refid="structsearch__it_1a8cf3aec16419ecf395c43b43202ffb60" kindref="member">p</ref>[j<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsearch__it_1a38ccae906a5d300780dce4d451deb17f" kindref="member">s</ref>[j]<sp/>==<sp/>cur)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref><sp/>=<sp/>j<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!j)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsearch__it_1a8cf3aec16419ecf395c43b43202ffb60" kindref="member">p</ref>[<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>]<sp/>=<sp/><ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a49bc164f30e64702250d2cbea09bf86c" kindref="member">dbg</ref>(<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a49bc164f30e64702250d2cbea09bf86c" kindref="member">dbg</ref>(<ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsearch__it_1ad6180023d90fa2b55c0efece83b5c055" kindref="member">o</ref><sp/>==<sp/><ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111" refid="string_8hpp_1ab6c8ca76a6f0b8cc64a2a42b5f37c449" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="string_8hpp_1ab6c8ca76a6f0b8cc64a2a42b5f37c449" kindref="member">operator==</ref>(<ref refid="structsearch__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structsearch__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sa<sp/>=<sp/>a.<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>,<sp/>sb<sp/>=<sp/>b.<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>^<sp/>sb)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>==<sp/>b.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>==<sp/>a.<ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.<ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref><sp/>==<sp/>b.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123" refid="string_8hpp_1a172956100bf7aa13ca8ecb1b872826e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="string_8hpp_1a172956100bf7aa13ca8ecb1b872826e2" kindref="member">operator&lt;</ref>(<ref refid="structsearch__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structsearch__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sa<sp/>=<sp/>a.<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>,<sp/>sb<sp/>=<sp/>b.<ref refid="structsearch__it_1a4469baa0cfd438036376385f2dd914b0" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>^<sp/>sb)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>&lt;<sp/>b.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref><sp/>&lt;<sp/>a.<ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.<ref refid="structsearch__it_1a46579f4b89ff311a870546f50af638c2" kindref="member">ed</ref><sp/>&lt;<sp/>b.<ref refid="structsearch__it_1a72ea4698639a3fedc737de70319d72eb" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135" refid="string_8hpp_1a426f3aae79af5e0f9bf49f2dc28d3da8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="string_8hpp_1a426f3aae79af5e0f9bf49f2dc28d3da8" kindref="member">search_ra</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts<sp/>&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range</ref>{<ref refid="structsearch__it" kindref="compound">search_it</ref>(args...),<sp/><ref refid="structsearch__it" kindref="compound">search_it</ref>()};</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138" refid="classtrie__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtrie__node" kindref="compound">trie_node</ref><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;trie_node<sp/>*&gt;<sp/>adj;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>start,<sp/>end;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtrie__node" kindref="compound">trie_node</ref>()<sp/>:<sp/>adj(26),<sp/>start()<sp/>{}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtrie__node" kindref="compound">trie_node</ref><sp/>*operator[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adj[c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">];<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtrie__node" kindref="compound">trie_node</ref><sp/>*build_trie(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*root<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtrie__node" kindref="compound">trie_node</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>str.size())<sp/>{}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="148" refid="string_8hpp_1a0ca9f9c163492b1f67aecc120f5b5e09" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="string_8hpp_1a0ca9f9c163492b1f67aecc120f5b5e09" kindref="member">test_trie_node</ref>()<sp/>{}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/string.hpp"/>
  </compounddef>
</doxygen>
