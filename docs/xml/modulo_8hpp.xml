<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="modulo_8hpp" kind="file" language="C++">
    <compoundname>modulo.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includedby refid="number__theory_8hpp" local="yes">/home/ram/OmniTemplate/number_theory.hpp</includedby>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/template.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/ram/OmniTemplate/number_theory.hpp</label>
        <link refid="number__theory_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structno__mod" prot="public">no_mod</innerclass>
    <innerclass refid="structmd" prot="public">md</innerclass>
    <innerclass refid="structid" prot="public">id</innerclass>
    <innerclass refid="structstd_1_1hash_3_01md_01_4" prot="public">std::hash&lt; md &gt;</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" prot="public" static="no" mutable="no">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <initializer>= 1e9 + 7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="13" column="4" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T power</definition>
        <argsstring>(T a, size_t b)</argsstring>
        <name>power</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return <formula id="2">$a^b$</formula></para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="3" column="15" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="3" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1a7c033112eaf35800262e02ff27188e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmd" kindref="compound">md</ref></type>
        <definition>md operator+</definition>
        <argsstring>(md const &amp;a, md const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="25" column="4" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1a17100f55f940d2da859920ff8783fc92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmd" kindref="compound">md</ref></type>
        <definition>md operator++</definition>
        <argsstring>(md &amp;a)</argsstring>
        <name>operator++</name>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="29" column="4" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1aad02e0b47914b218083228d7ccd23076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmd" kindref="compound">md</ref></type>
        <definition>md operator-</definition>
        <argsstring>(md const &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="30" column="4" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1a0643abd64cbdf649cb7d2d1d10185b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator==</definition>
        <argsstring>(md const &amp;a, md const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="31" column="6" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1a739129162899ff43a39303d29bd964dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmd" kindref="compound">md</ref></type>
        <definition>md operator*</definition>
        <argsstring>(md const &amp;a, md const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Computes a times b modulo M using long double</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="32" column="4" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="32" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1ae515d341b4d4ed9e65ab11d85566dcb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmd" kindref="compound">md</ref></type>
        <definition>md operator/</definition>
        <argsstring>(id, md const &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structid" kindref="compound">id</ref></type>
        </param>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Computes the modular inverse <formula id="3">$b^{-1}$</formula></para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="46" column="4" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1ae2ca0fa4d4eb7f16638e75e1ba234ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator/</definition>
        <argsstring>(md const &amp;a, md const &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="51" column="6" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1ad6ef17134f6c5b63ed687fe46a62e2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto&amp; operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, md const &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structmd" kindref="compound">md</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="52" column="13" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1af63abc641089d55f193ed28ed00f7eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_power</definition>
        <argsstring>()</argsstring>
        <name>test_power</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="56" column="6" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1af249c063d4cee0dc930796b8728265e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_md</definition>
        <argsstring>()</argsstring>
        <name>test_md</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="62" column="6" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="modulo_8hpp_1ace704e27d561de2f121af8778c37d2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_modulo</definition>
        <argsstring>()</argsstring>
        <name>test_modulo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/modulo.hpp" line="72" column="6" bodyfile="/home/ram/OmniTemplate/modulo.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" kindref="member">power</ref>(T<sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>b;<sp/>b<sp/>&gt;&gt;=<sp/>1,<sp/>a<sp/>*=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref><sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13" refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref><sp/>=<sp/>1e9<sp/>+<sp/>7;<sp/></highlight><highlight class="comment">//^<sp/>Modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structno__mod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structno__mod" kindref="compound">no_mod</ref><sp/>{};</highlight></codeline>
<codeline lineno="15" refid="structmd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmd" kindref="compound">md</ref><sp/>{</highlight></codeline>
<codeline lineno="17" refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="18" refid="structmd_1a5d3fbc95f155d9fd6c8e6f2adb0c21eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmd_1a5d3fbc95f155d9fd6c8e6f2adb0c21eb" kindref="member">md</ref>()<sp/>:<sp/><ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>{0LL}<sp/>{}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>enable_if_t&lt;is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="21" refid="structmd_1adf938bd8e00154130a8cf712a747ea3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmd_1adf938bd8e00154130a8cf712a747ea3d" kindref="member">md</ref>(T<sp/>x_)<sp/>:<sp/><ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>(<ref refid="structll" kindref="compound">ll</ref>(x_)<sp/>%<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="22" refid="structmd_1a35987cee585ce0405bb4125d8f62b6b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmd_1a35987cee585ce0405bb4125d8f62b6b3" kindref="member">md</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x_,<sp/><ref refid="structno__mod" kindref="compound">no_mod</ref>)<sp/>:<sp/><ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>(x_)<sp/>{}</highlight></codeline>
<codeline lineno="23" refid="structmd_1a0ec8460ddbed45528ad11227e82a0f14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25" refid="modulo_8hpp_1a7c033112eaf35800262e02ff27188e22" refkind="member"><highlight class="normal"><ref refid="structmd" kindref="compound">md</ref><sp/><ref refid="modulo_8hpp_1a7c033112eaf35800262e02ff27188e22" kindref="member">operator+</ref>(<ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref><sp/>+<sp/>b.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{sum<sp/>&gt;=<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref><sp/>?<sp/>sum<sp/>-<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref><sp/>:<sp/>sum,<sp/><ref refid="structno__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29" refid="modulo_8hpp_1a17100f55f940d2da859920ff8783fc92" refkind="member"><highlight class="normal"><ref refid="structmd" kindref="compound">md</ref><sp/><ref refid="modulo_8hpp_1a17100f55f940d2da859920ff8783fc92" kindref="member">operator++</ref>(<ref refid="structmd" kindref="compound">md</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="30" refid="modulo_8hpp_1aad02e0b47914b218083228d7ccd23076" refkind="member"><highlight class="normal"><ref refid="structmd" kindref="compound">md</ref><sp/><ref refid="modulo_8hpp_1aad02e0b47914b218083228d7ccd23076" kindref="member">operator-</ref>(<ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref><sp/>-<sp/>a.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>,<sp/><ref refid="structno__mod" kindref="compound">no_mod</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="31" refid="modulo_8hpp_1a0643abd64cbdf649cb7d2d1d10185b17" refkind="member"><highlight class="normal"><ref refid="range_8hpp_1a198fc8d7aeb577c1c390bbf3cf9ade86" kindref="member">bin</ref>(==,<sp/><ref refid="structmd" kindref="compound">md</ref>);</highlight></codeline>
<codeline lineno="32" refid="modulo_8hpp_1a739129162899ff43a39303d29bd964dd" refkind="member"><highlight class="normal"><ref refid="structmd" kindref="compound">md</ref><sp/><ref refid="modulo_8hpp_1a739129162899ff43a39303d29bd964dd" kindref="member">operator*</ref>(<ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref><sp/>quot<sp/>=<sp/><ref refid="core_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(a.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>)<sp/>*<sp/><ref refid="core_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(b.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>)<sp/>/<sp/><ref refid="core_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(<ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>approximate<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rem<sp/>=<sp/><ref refid="core_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>(a.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>)<sp/>*<sp/><ref refid="core_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>(b.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>)<sp/>-<sp/><ref refid="core_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>(<ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>)<sp/>*<sp/>quot;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>+<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>,<sp/><ref refid="structno__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;=<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>-<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>,<sp/><ref refid="structno__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem,<sp/><ref refid="structno__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45" refid="structid" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structid" kindref="compound">id</ref><sp/>{};</highlight></codeline>
<codeline lineno="46" refid="modulo_8hpp_1ae515d341b4d4ed9e65ab11d85566dcb5" refkind="member"><highlight class="normal"><ref refid="structmd" kindref="compound">md</ref><sp/><ref refid="modulo_8hpp_1ae515d341b4d4ed9e65ab11d85566dcb5" kindref="member">operator/</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(b<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" kindref="member">power</ref>(b,<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref><sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51" refid="modulo_8hpp_1ae2ca0fa4d4eb7f16638e75e1ba234ea4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="modulo_8hpp_1ae515d341b4d4ed9e65ab11d85566dcb5" kindref="member">operator/</ref>(<ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">{}<sp/>/<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="52" refid="modulo_8hpp_1ad6ef17134f6c5b63ed687fe46a62e2d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="modulo_8hpp_1ad6ef17134f6c5b63ed687fe46a62e2d7" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>m.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="core_8hpp_1a42155fc7b646b2b5651b69a5fc8bf701" kindref="member">END_NS</ref></highlight></codeline>
<codeline lineno="56" refid="modulo_8hpp_1af63abc641089d55f193ed28ed00f7eaa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="modulo_8hpp_1af63abc641089d55f193ed28ed00f7eaa" kindref="member">test_power</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" kindref="member">power</ref>(2,<sp/>3)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" kindref="member">power</ref>(3,<sp/>10)<sp/>==<sp/>59049);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwith" kindref="compound">with</ref><sp/>_m{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7),<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="modulo_8hpp_1a18e6bf3063c827da07de67653546a850" kindref="member">power</ref>(<ref refid="structmd" kindref="compound">md</ref>{3},<sp/>1000)<sp/>==<sp/><ref refid="structmd" kindref="compound">md</ref>{56888193});</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62" refid="modulo_8hpp_1af249c063d4cee0dc930796b8728265e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="modulo_8hpp_1af249c063d4cee0dc930796b8728265e0" kindref="member">test_md</ref>()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwith" kindref="compound">with</ref><sp/>_m{7,<sp/><ref refid="modulo_8hpp_1a5caab15f8b74a132460ac94fa9dab4a7" kindref="member">M</ref>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmd" kindref="compound">md</ref>{34}<sp/>/<sp/><ref refid="structmd" kindref="compound">md</ref>{-2}<sp/>==<sp/><ref refid="structmd" kindref="compound">md</ref>{4});</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmd" kindref="compound">md</ref>{2}<sp/>-<sp/><ref refid="structmd" kindref="compound">md</ref>{6}<sp/>==<sp/><ref refid="structmd" kindref="compound">md</ref>{3});</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="68" refid="structstd_1_1hash_3_01md_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structmd" kindref="compound">md</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="69" refid="structstd_1_1hash_3_01md_01_4_1ae02292d626a0cd109a0e55c5a6779c3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1hash_3_01md_01_4_1ae02292d626a0cd109a0e55c5a6779c3f" kindref="member">operator()</ref>(<ref refid="structmd" kindref="compound">md</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.<ref refid="structmd_1ae010a9bb8f22532125423306ed05d3d4" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="modulo_8hpp_1ace704e27d561de2f121af8778c37d2d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="modulo_8hpp_1ace704e27d561de2f121af8778c37d2d4" kindref="member">test_modulo</ref>()<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="modulo_8hpp_1af63abc641089d55f193ed28ed00f7eaa" kindref="member">test_power</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="modulo_8hpp_1af249c063d4cee0dc930796b8728265e0" kindref="member">test_md</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="core_8hpp_1af89ff58234ca2a9be334ad95798b5da7" kindref="member">BEGIN_NS</ref></highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/modulo.hpp"/>
  </compounddef>
</doxygen>
