<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="utility_8hpp" kind="file" language="C++">
    <compoundname>utility.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includedby refid="core_8hpp" local="yes">/home/ram/OmniTemplate/core.hpp</includedby>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/template.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="24">
        <label>/home/ram/OmniTemplate/splay_tree.hpp</label>
        <link refid="splay__tree_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/ram/OmniTemplate/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/graph_theory.hpp</label>
        <link refid="graph__theory_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/ram/OmniTemplate/number_theory.hpp</label>
        <link refid="number__theory_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/ram/OmniTemplate/my_int.hpp</label>
        <link refid="my__int_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/ram/OmniTemplate/io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/ram/OmniTemplate/geometry.hpp</label>
        <link refid="geometry_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/ram/OmniTemplate/main.hpp</label>
        <link refid="main_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/ram/OmniTemplate/combinatorics.hpp</label>
        <link refid="combinatorics_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/ram/OmniTemplate/coroutine.hpp</label>
        <link refid="coroutine_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/ram/OmniTemplate/dsu.hpp</label>
        <link refid="dsu_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/home/ram/OmniTemplate/fft.hpp</label>
        <link refid="fft_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/home/ram/OmniTemplate/segment_tree.hpp</label>
        <link refid="segment__tree_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="28">
        <label>/home/ram/OmniTemplate/treap.hpp</label>
        <link refid="treap_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/ram/OmniTemplate/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/home/ram/OmniTemplate/time.hpp</label>
        <link refid="time_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/ram/OmniTemplate/range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/ram/OmniTemplate/persistent.hpp</label>
        <link refid="persistent_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/home/ram/OmniTemplate/tree.hpp</label>
        <link refid="tree_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/ram/OmniTemplate/string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/home/ram/OmniTemplate/queue.hpp</label>
        <link refid="queue_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/ram/OmniTemplate/big_integer.hpp</label>
        <link refid="big__integer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structwith" prot="public">with</innerclass>
    <innerclass refid="structfix" prot="public">fix</innerclass>
    <innerclass refid="structar" prot="public">ar</innerclass>
    <innerclass refid="structar_3_01T_0fn_0e_4" prot="public">ar&lt; T[n]&gt;</innerclass>
    <innerclass refid="structrandom__device__patch" prot="public">random_device_patch</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="utility_8hpp_1a76cdb96860b77886867832efcffeeb32" prot="public" static="no">
        <name>lambda</name>
        <param><defname>f</defname></param>
        <initializer>[&amp;](auto... args) { return f(args...); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="19" column="9" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="utility_8hpp_1a98dc5e985b024363c80f2778a577c51a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structar" kindref="compound">ar</ref>&lt; T &gt;::type</type>
        <definition>using ar_t =  typename ar&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>ar_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="66" column="16" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="utility_8hpp_1ab383d789912924c9ccfe84042e73bf06" prot="public" static="no">
        <type><ref refid="structrandom__device__patch" kindref="compound">random_device_patch</ref></type>
        <definition>using default_random_device =  random_device_patch</definition>
        <argsstring></argsstring>
        <name>default_random_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="81" column="1" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="utility_8hpp_1a9fc68ed025086c5affbd401726bc07b8" prot="public" static="no" mutable="no">
        <type>default_random_engine</type>
        <definition>default_random_engine reng</definition>
        <argsstring></argsstring>
        <name>reng</name>
        <initializer>{<ref refid="utility_8hpp_1ab383d789912924c9ccfe84042e73bf06" kindref="member">default_random_device</ref>{}()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="82" column="23" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="utility_8hpp_1a5b93ebe953feb9309e59874dee0fdb07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto maxeq</definition>
        <argsstring>(T &amp;&amp;x, const T &amp;y)</argsstring>
        <name>maxeq</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="20" column="18" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1abc6bb3f86a9c2d3083df5636d475b0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto mineq</definition>
        <argsstring>(T &amp;&amp;x, const T &amp;y)</argsstring>
        <name>mineq</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="21" column="18" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1a81e820760e553018a680c8264aa443b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cache</definition>
        <argsstring>(const T &amp;f)</argsstring>
        <name>cache</name>
        <param>
          <type>const T &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Cache calls to f using a map of type T</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="22" column="18" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="22" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1a44a45701b2aec7031b9a0592b8fe433b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Eq</type>
            <defval>equal_to&lt;&gt;</defval>
          </param>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto uniq</definition>
        <argsstring>(Cont &amp;v, Eq const &amp;up=Eq{}, T const &amp;sp=T{})</argsstring>
        <name>uniq</name>
        <param>
          <type>Cont &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Eq const &amp;</type>
          <declname>up</declname>
          <defval>Eq{}</defval>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>sp</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Remove all duplicates element from v so that all elements in v are distinct and sorted</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="33" column="6" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto map_args</definition>
        <argsstring>(const Func &amp;f, T g=T{})</argsstring>
        <name>map_args</name>
        <param>
          <type>const Func &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>g</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="41" column="6" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1ad32b8ad96cf96371fe9ad3c397218352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto prev_less</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>prev_less</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="44" column="18" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1a02462a4216b54e8116b62f164ac15368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto nx2</definition>
        <argsstring>(ll x)</argsstring>
        <name>nx2</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="59" column="6" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="utility_8hpp_1ae7d7f9d0bbad247488d15de2919cfb9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll next_comb</definition>
        <argsstring>(ll x)</argsstring>
        <name>next_comb</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/utility.hpp" line="60" column="4" bodyfile="/home/ram/OmniTemplate/utility.hpp" bodystart="60" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="structwith" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwith" kindref="compound">with</ref><sp/>{</highlight></codeline>
<codeline lineno="5" refid="structwith_1aac8393894f6a5ae26f7573d58d4b6c14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structwith_1aac8393894f6a5ae26f7573d58d4b6c14" kindref="member">old</ref>;</highlight></codeline>
<codeline lineno="6" refid="structwith_1a31cd79dba1d03bdd042e1fda6978da41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>&amp;<ref refid="structwith_1a31cd79dba1d03bdd042e1fda6978da41" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="7" refid="structwith_1a57a2ecba97c092a98b37db9d713f7b38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwith_1a57a2ecba97c092a98b37db9d713f7b38" kindref="member">with</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>new_,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>&amp;v_)<sp/>:<sp/><ref refid="structwith_1aac8393894f6a5ae26f7573d58d4b6c14" kindref="member">old</ref>(v_),<sp/><ref refid="structwith_1a31cd79dba1d03bdd042e1fda6978da41" kindref="member">v</ref>(v_)<sp/>{<sp/><ref refid="structwith_1a31cd79dba1d03bdd042e1fda6978da41" kindref="member">v</ref><sp/>=<sp/>new_;<sp/>}</highlight></codeline>
<codeline lineno="8" refid="structwith_1a77e07c1f4c1ecd00db6fcb2dcb18cf6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwith_1a77e07c1f4c1ecd00db6fcb2dcb18cf6b" kindref="member">~with</ref>()<sp/>{<sp/><ref refid="structwith_1a31cd79dba1d03bdd042e1fda6978da41" kindref="member">v</ref><sp/>=<sp/><ref refid="structwith_1aac8393894f6a5ae26f7573d58d4b6c14" kindref="member">old</ref>;<sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="normal">};</highlight></codeline>
<codeline lineno="10" refid="structfix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="namespacefix" kindref="compound">fix</ref><sp/>{</highlight></codeline>
<codeline lineno="13" refid="structfix_1a2012a85b07f6b8fca89428ee232a0c52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Func<sp/><ref refid="structfix_1a2012a85b07f6b8fca89428ee232a0c52" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="14" refid="structfix_1adb36f588bb16737970ac97c54686c126" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfix_1adb36f588bb16737970ac97c54686c126" kindref="member">fix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func_)<sp/>:<sp/><ref refid="structfix_1a2012a85b07f6b8fca89428ee232a0c52" kindref="member">func</ref>(func_)<sp/>{}</highlight></codeline>
<codeline lineno="15" refid="structfix_1af62440018ea81c6b2fc7b29620a714c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structfix_1af62440018ea81c6b2fc7b29620a714c2" kindref="member">operator()</ref>(Ts<sp/>&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfix_1a2012a85b07f6b8fca89428ee232a0c52" kindref="member">func</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>forward&lt;decltype(args)&gt;(args)...);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19" refid="utility_8hpp_1a76cdb96860b77886867832efcffeeb32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>lambda(f)<sp/>[&amp;](auto...<sp/>args)<sp/>{<sp/>return<sp/>f(args...);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="utility_8hpp_1a5b93ebe953feb9309e59874dee0fdb07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1a5b93ebe953feb9309e59874dee0fdb07" kindref="member">maxeq</ref>(T<sp/>&amp;&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>max(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="21" refid="utility_8hpp_1abc6bb3f86a9c2d3083df5636d475b0fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1abc6bb3f86a9c2d3083df5636d475b0fd" kindref="member">mineq</ref>(T<sp/>&amp;&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>min(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="22" refid="utility_8hpp_1a81e820760e553018a680c8264aa443b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1a81e820760e553018a680c8264aa443b4" kindref="member">cache</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ch;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch.find(arg)<sp/>==<sp/>end(ch))<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch[arg]<sp/>=<sp/>f(arg);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eq<sp/>=<sp/>equal_to&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;</highlight></codeline>
<codeline lineno="33" refid="utility_8hpp_1a44a45701b2aec7031b9a0592b8fe433b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1a44a45701b2aec7031b9a0592b8fe433b" kindref="member">uniq</ref>(Cont<sp/>&amp;<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>,<sp/>Eq<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;up<sp/>=<sp/>Eq{},<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;sp<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="core_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>),<sp/>sp);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>.resize(unique(<ref refid="core_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>),<sp/>up)<sp/>-<sp/>begin(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="41" refid="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1a03511d4859cd518749f66a6af5391f92" kindref="member">map_args</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f,<sp/>T<sp/>g<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;...<sp/>args)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g(f(args)...);<sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44" refid="utility_8hpp_1ad32b8ad96cf96371fe9ad3c397218352" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1ad32b8ad96cf96371fe9ad3c397218352" kindref="member">prev_less</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>.size();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a8634e9b99169b29bc9a86927e715da54" kindref="member">vl</ref><sp/>l(n,<sp/>-1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>stack&lt;ll&gt;<sp/>s;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s.size()<sp/>&amp;&amp;<sp/>!(s.top()<sp/>&lt;<sp/><ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>[i]))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.pop();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.size())<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[i]<sp/>=<sp/>s.top();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.push(<ref refid="segment__tree_8hpp_1a38bf1e5e0427bdeba2b469eea9befc23" kindref="member">v</ref>[i]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59" refid="utility_8hpp_1a02462a4216b54e8116b62f164ac15368" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="utility_8hpp_1a02462a4216b54e8116b62f164ac15368" kindref="member">nx2</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref>(1LL)<sp/>&lt;&lt;<sp/><ref refid="structll" kindref="compound">ll</ref>(ceil(log2(<ref refid="core_8hpp_1a583d558126ab02babe89a77ae06a4156" kindref="member">lli</ref>(x))));<sp/>}</highlight></codeline>
<codeline lineno="60" refid="utility_8hpp_1ae7d7f9d0bbad247488d15de2919cfb9e" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="utility_8hpp_1ae7d7f9d0bbad247488d15de2919cfb9e" kindref="member">next_comb</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>tz<sp/>=<sp/>__builtin_ctz(x);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y<sp/>=<sp/>x<sp/>+<sp/>(<ref refid="structll" kindref="compound">ll</ref>{1}<sp/>&lt;&lt;<sp/>tz);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>|<sp/>(y<sp/>^<sp/>x)<sp/>&gt;&gt;<sp/>(2<sp/>+<sp/>tz);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65" refid="structar_1a851a27df00ce2569904d6d18ca540cd1" refkind="member"><highlight class="normal"><ref refid="debug_8hpp_1ae23bfdc9a034bac8e1c722626e7cc983" kindref="member">tm</ref>()<sp/>struct<sp/><ref refid="structar" kindref="compound">ar</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structar_1a851a27df00ce2569904d6d18ca540cd1" kindref="member">type</ref><sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="66" refid="utility_8hpp_1a98dc5e985b024363c80f2778a577c51a" refkind="member"><highlight class="normal"><ref refid="debug_8hpp_1ae23bfdc9a034bac8e1c722626e7cc983" kindref="member">tm</ref>()<sp/>using<sp/><ref refid="utility_8hpp_1a98dc5e985b024363c80f2778a577c51a" kindref="member">ar_t</ref><sp/>=<sp/>typename<sp/><ref refid="structar" kindref="compound">ar</ref>&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="67" refid="structar_3_01T_0fn_0e_4" refkind="compound"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n&gt;<sp/>struct<sp/><ref refid="structar" kindref="compound">ar</ref>&lt;T[n]&gt;<sp/>{</highlight></codeline>
<codeline lineno="68" refid="structar_3_01T_0fn_0e_4_1ad07c2389455b609ba547f224af1a4c39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structar_3_01T_0fn_0e_4_1ad07c2389455b609ba547f224af1a4c39" kindref="member">type</ref><sp/>=<sp/>array&lt;ar_t&lt;T&gt;,<sp/>n&gt;;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structrandom__device__patch" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrandom__device__patch" kindref="compound">random_device_patch</ref><sp/>{</highlight></codeline>
<codeline lineno="74" refid="structrandom__device__patch_1a5d58f2b4a5507b0b1ae6273eee7d7e07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structrandom__device__patch_1a5d58f2b4a5507b0b1ae6273eee7d7e07" kindref="member">operator()</ref>()<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock_::now()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.time_since_epoch()</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();<sp/></highlight><highlight class="comment">//<sp/>Probably<sp/>random<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79" refid="structrandom__device__patch_1ad1afe488ba29afca0ca7787af051cdbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structrandom__device__patch_1ad1afe488ba29afca0ca7787af051cdbe" kindref="member">entropy</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81" refid="utility_8hpp_1ab383d789912924c9ccfe84042e73bf06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrandom__device__patch" kindref="compound">default_random_device</ref><sp/>=<sp/><ref refid="structrandom__device__patch" kindref="compound">random_device_patch</ref>;</highlight></codeline>
<codeline lineno="82" refid="utility_8hpp_1a9fc68ed025086c5affbd401726bc07b8" refkind="member"><highlight class="normal">default_random_engine<sp/><ref refid="utility_8hpp_1a9fc68ed025086c5affbd401726bc07b8" kindref="member">reng</ref>{<ref refid="structrandom__device__patch" kindref="compound">default_random_device</ref>{}()};</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/utility.hpp"/>
  </compounddef>
</doxygen>
